// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "FioapiKafka/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPersonService is a mock of PersonService interface.
type MockPersonService struct {
	ctrl     *gomock.Controller
	recorder *MockPersonServiceMockRecorder
}

// MockPersonServiceMockRecorder is the mock recorder for MockPersonService.
type MockPersonServiceMockRecorder struct {
	mock *MockPersonService
}

// NewMockPersonService creates a new mock instance.
func NewMockPersonService(ctrl *gomock.Controller) *MockPersonService {
	mock := &MockPersonService{ctrl: ctrl}
	mock.recorder = &MockPersonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonService) EXPECT() *MockPersonServiceMockRecorder {
	return m.recorder
}

// CreatePeople mocks base method.
func (m *MockPersonService) CreatePeople(aproovedFIO chan *models.PersonOut) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreatePeople", aproovedFIO)
}

// CreatePeople indicates an expected call of CreatePeople.
func (mr *MockPersonServiceMockRecorder) CreatePeople(aproovedFIO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeople", reflect.TypeOf((*MockPersonService)(nil).CreatePeople), aproovedFIO)
}

// DeletePerson mocks base method.
func (m *MockPersonService) DeletePerson(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonServiceMockRecorder) DeletePerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonService)(nil).DeletePerson), id)
}

// GetPeople mocks base method.
func (m *MockPersonService) GetPeople() ([]*models.PersonOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeople")
	ret0, _ := ret[0].([]*models.PersonOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeople indicates an expected call of GetPeople.
func (mr *MockPersonServiceMockRecorder) GetPeople() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeople", reflect.TypeOf((*MockPersonService)(nil).GetPeople))
}

// GetPersonByID mocks base method.
func (m *MockPersonService) GetPersonByID(id string) (*models.PersonOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonByID", id)
	ret0, _ := ret[0].(*models.PersonOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByID indicates an expected call of GetPersonByID.
func (mr *MockPersonServiceMockRecorder) GetPersonByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByID", reflect.TypeOf((*MockPersonService)(nil).GetPersonByID), id)
}

// GetPersonsByAge mocks base method.
func (m *MockPersonService) GetPersonsByAge(age string) ([]*models.PersonOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonsByAge", age)
	ret0, _ := ret[0].([]*models.PersonOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonsByAge indicates an expected call of GetPersonsByAge.
func (mr *MockPersonServiceMockRecorder) GetPersonsByAge(age interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonsByAge", reflect.TypeOf((*MockPersonService)(nil).GetPersonsByAge), age)
}

// GetPersonsByGender mocks base method.
func (m *MockPersonService) GetPersonsByGender(gender string) ([]*models.PersonOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonsByGender", gender)
	ret0, _ := ret[0].([]*models.PersonOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonsByGender indicates an expected call of GetPersonsByGender.
func (mr *MockPersonServiceMockRecorder) GetPersonsByGender(gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonsByGender", reflect.TypeOf((*MockPersonService)(nil).GetPersonsByGender), gender)
}

// GetPersonsByName mocks base method.
func (m *MockPersonService) GetPersonsByName(name string) ([]*models.PersonOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonsByName", name)
	ret0, _ := ret[0].([]*models.PersonOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonsByName indicates an expected call of GetPersonsByName.
func (mr *MockPersonServiceMockRecorder) GetPersonsByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonsByName", reflect.TypeOf((*MockPersonService)(nil).GetPersonsByName), name)
}

// UpdatePerson mocks base method.
func (m *MockPersonService) UpdatePerson(id string, person *models.PersonOut) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", id, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonServiceMockRecorder) UpdatePerson(id, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPersonService)(nil).UpdatePerson), id, person)
}
